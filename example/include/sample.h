////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#ifndef __sample_20180724103727_h__
#define __sample_20180724103727_h__

#include "slothjson.h"

namespace slothjson {

struct json_t
{
    bool error;
    std::string message;
    int16_t code;
    std::string nonce;
    int64_t timestamp;

    void skip_error() { __skip_error = true; }
    void skip_message() { __skip_message = true; }
    void skip_code() { __skip_code = true; }
    void skip_nonce() { __skip_nonce = true; }
    void skip_timestamp() { __skip_timestamp = true; }

    bool json_has_error() const { return __json_has_error; }
    bool json_has_message() const { return __json_has_message; }
    bool json_has_code() const { return __json_has_code; }
    bool json_has_nonce() const { return __json_has_nonce; }
    bool json_has_timestamp() const { return __json_has_timestamp; }

    json_t();
    json_t& operator=(const json_t& obj_val);
    bool operator==(const json_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_error;
    bool __skip_message;
    bool __skip_code;
    bool __skip_nonce;
    bool __skip_timestamp;

    bool __json_has_error;
    bool __json_has_message;
    bool __json_has_code;
    bool __json_has_nonce;
    bool __json_has_timestamp;
};

bool encode(const json_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, json_t& obj_val);

struct root_t
{
    std::string json;
    std::string signature;

    void skip_json() { __skip_json = true; }
    void skip_signature() { __skip_signature = true; }

    bool json_has_json() const { return __json_has_json; }
    bool json_has_signature() const { return __json_has_signature; }

    root_t();
    root_t& operator=(const root_t& obj_val);
    bool operator==(const root_t& obj_val) const;
    bool encode(allocator_t& alloc, rapidjson::Value& json_val) const;
    bool decode(const rapidjson::Value& json_val);

private:
    bool __skip_json;
    bool __skip_signature;

    bool __json_has_json;
    bool __json_has_signature;
};

bool encode(const root_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val);
bool decode(const rapidjson::Value& json_val, root_t& obj_val);

} // namespace slothjson

#endif // __sample_20180724103727_h__