////////////////////////////////////////////////////////////////////////////////
// NOTE : Generated by slothjson. It is NOT supposed to modify this file.
////////////////////////////////////////////////////////////////////////////////
#include "sample.h"

namespace slothjson {

json_t::json_t()
{
    error = true;
    __skip_error = false;
    __json_has_error = false;

    message = "404 not found";
    __skip_message = false;
    __json_has_message = false;

    code = 0;
    __skip_code = false;
    __json_has_code = false;

    nonce = "0.6268985954069382";
    __skip_nonce = false;
    __json_has_nonce = false;

    timestamp = 1532269760476;
    __skip_timestamp = false;
    __json_has_timestamp = false;
}

json_t& json_t::operator=(const json_t& obj_val)
{
    this->error = obj_val.error;
    this->message = obj_val.message;
    this->code = obj_val.code;
    this->nonce = obj_val.nonce;
    this->timestamp = obj_val.timestamp;
    return *this;
}

bool json_t::operator==(const json_t& obj_val) const
{
    if (!(this->error == obj_val.error)) return false;
    if (!(this->message == obj_val.message)) return false;
    if (!(this->code == obj_val.code)) return false;
    if (!(this->nonce == obj_val.nonce)) return false;
    if (!(this->timestamp == obj_val.timestamp)) return false;
    return true;
}

bool json_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_error && !encode_field(error, "error", alloc, json_val)) break;
        if (!__skip_message && !encode_field(message, "message", alloc, json_val)) break;
        if (!__skip_code && !encode_field(code, "code", alloc, json_val)) break;
        if (!__skip_nonce && !encode_field(nonce, "nonce", alloc, json_val)) break;
        if (!__skip_timestamp && !encode_field(timestamp, "timestamp", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool json_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "error", error, __json_has_error)) break;
        if (!decode_field(json_val, "message", message, __json_has_message)) break;
        if (!decode_field(json_val, "code", code, __json_has_code)) break;
        if (!decode_field(json_val, "nonce", nonce, __json_has_nonce)) break;
        if (!decode_field(json_val, "timestamp", timestamp, __json_has_timestamp)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const json_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, json_t& obj_val)
{
    return obj_val.decode(json_val);
}

root_t::root_t()
{
    __skip_json = false;
    __json_has_json = false;

    __skip_signature = false;
    __json_has_signature = false;
}

root_t& root_t::operator=(const root_t& obj_val)
{
    this->json = obj_val.json;
    this->signature = obj_val.signature;
    return *this;
}

bool root_t::operator==(const root_t& obj_val) const
{
    if (!(this->json == obj_val.json)) return false;
    if (!(this->signature == obj_val.signature)) return false;
    return true;
}

bool root_t::encode(allocator_t& alloc, rapidjson::Value& json_val) const
{
    do
    {
        json_val.SetObject();
        if (!__skip_json && !encode_field(json, "json", alloc, json_val)) break;
        if (!__skip_signature && !encode_field(signature, "signature", alloc, json_val)) break;

        return true;
    } while (0);

    return false;
}

bool root_t::decode(const rapidjson::Value& json_val)
{
    do
    {
        if (!decode_field(json_val, "json", json, __json_has_json)) break;
        if (!decode_field(json_val, "signature", signature, __json_has_signature)) break;

        return true;
    } while (0);

    return false;
}

bool encode(const root_t& obj_val, allocator_t& alloc, rapidjson::Value& json_val)
{
    return obj_val.encode(alloc, json_val);
}

bool decode(const rapidjson::Value& json_val, root_t& obj_val)
{
    return obj_val.decode(json_val);
}

} // namespace slothjson